{
  "name": "markdownlint",
  "version": "0.3.1",
  "description": "A Node.js style checker and lint tool for Markdown/CommonMark files.",
  "main": "lib/markdownlint.js",
  "author": {
    "name": "David Anson",
    "url": "https://dlaa.me/"
  },
  "license": "MIT",
  "homepage": "https://github.com/DavidAnson/markdownlint",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/DavidAnson/markdownlint.git"
  },
  "bugs": {
    "url": "https://github.com/DavidAnson/markdownlint/issues"
  },
  "scripts": {
    "test": "nodeunit test/markdownlint-test.js",
    "test-cover": "istanbul cover node_modules/nodeunit/bin/nodeunit test/markdownlint-test.js",
    "test-extra": "nodeunit test/markdownlint-test-extra.js",
    "debug": "node debug node_modules/nodeunit/bin/nodeunit",
    "lint": "eslint lib test schema && eslint --env browser --global markdownit --global markdownlint --rule \"no-unused-vars: 0, no-extend-native: 0, max-statements: 0, no-console: 0\" demo && eslint --rule \"no-console: 0, no-shadow: 0, object-property-newline: 0\" example",
    "build-config-schema": "node schema/build-config-schema.js",
    "build-demo": "cpy node_modules/markdown-it/dist/markdown-it.min.js demo && cd demo && rimraf markdownlint-browser.* && cpy file-header.js . --rename=markdownlint-browser.js && browserify browser-polyfills.js ../lib/markdownlint.js --standalone markdownlint >> markdownlint-browser.js && uglifyjs markdownlint-browser.js --compress --mangle --comments --output markdownlint-browser.min.js",
    "build-example": "npm install --ignore-scripts grunt grunt-cli gulp through2",
    "example": "cd example && node standalone.js && grunt markdownlint --force && gulp markdownlint"
  },
  "dependencies": {
    "markdown-it": "^8.0.1"
  },
  "devDependencies": {
    "browserify": "^13.1.1",
    "cpy-cli": "^1.0.1",
    "eslint": "^3.10.0",
    "glob": "^7.1.1",
    "istanbul": "^0.4.5",
    "nodeunit": "^0.10.2",
    "q": "^1.4.1",
    "rimraf": "^2.5.4",
    "tv4": "^1.2.7",
    "uglify-js": "^2.7.4"
  },
  "keywords": [
    "markdown",
    "lint",
    "markdownlint",
    "md",
    "validate"
  ],
  "browser": {
    "markdown-it": "./demo/markdown-it-stub.js"
  },
  "readme": "# markdownlint\r\n\r\n> A Node.js style checker and lint tool for Markdown/CommonMark files.\r\n\r\n[![npm version][npm-image]][npm-url]\r\n[![GitHub tag][github-tag-image]][github-tag-url]\r\n[![Build status][travis-image]][travis-url]\r\n[![Coverage][coveralls-image]][coveralls-url]\r\n[![License][license-image]][license-url]\r\n\r\n## Install\r\n\r\n```shell\r\nnpm install markdownlint --save-dev\r\n```\r\n\r\n## Overview\r\n\r\nThe [Markdown](https://en.wikipedia.org/wiki/Markdown) markup language is\r\ndesigned to be easy to read, write, and understand. It succeeds - and its\r\nflexibility is both a benefit and a drawback. Many styles are possible, so\r\nformatting can be inconsistent. Some constructs don't work well in all\r\nparsers and should be avoided. The [CommonMark](http://commonmark.org/)\r\nspecification standardizes parsers - but not authors.\r\n\r\n`markdownlint` is a [static analysis](https://en.wikipedia.org/wiki/Static_program_analysis)\r\ntool for [Node.js](https://nodejs.org/) and [io.js](https://iojs.org/) with a\r\nlibrary of rules to enforce standards and consistency for Markdown files. It\r\nwas inspired by - and heavily influenced by - Mark Harrison's\r\n[markdownlint](https://github.com/mivok/markdownlint) for\r\n[Ruby](https://www.ruby-lang.org/). The rules, rule documentation, and test\r\ncases come directly from that project.\r\n\r\n### Related\r\n\r\n* [markdownlint-cli command-line interface for Node.js](https://github.com/igorshubovych/markdownlint-cli)\r\n* [grunt-markdownlint for the Grunt task runner](https://github.com/sagiegurari/grunt-markdownlint)\r\n* [vscode-markdownlint extension for VS Code](https://marketplace.visualstudio.com/items/DavidAnson.vscode-markdownlint)\r\n* [markdownlint/mdl gem for Ruby](https://rubygems.org/gems/mdl)\r\n\r\n## Demonstration\r\n\r\n[`markdownlint` demo](https://dlaa.me/markdownlint/), an interactive, in-browser\r\nplayground for learning and exploring.\r\n\r\n## Rules / Aliases\r\n\r\n* **MD001** *header-increment* - Header levels should only increment by one level at a time\r\n* **MD002** *first-header-h1* - First header should be a top level header\r\n* **MD003** *header-style* - Header style\r\n* **MD004** *ul-style* - Unordered list style\r\n* **MD005** *list-indent* - Inconsistent indentation for list items at the same level\r\n* **MD006** *ul-start-left* - Consider starting bulleted lists at the beginning of the line\r\n* **MD007** *ul-indent* - Unordered list indentation\r\n* **MD009** *no-trailing-spaces* - Trailing spaces\r\n* **MD010** *no-hard-tabs* - Hard tabs\r\n* **MD011** *no-reversed-links* - Reversed link syntax\r\n* **MD012** *no-multiple-blanks* - Multiple consecutive blank lines\r\n* **MD013** *line-length* - Line length\r\n* **MD014** *commands-show-output* - Dollar signs used before commands without showing output\r\n* **MD018** *no-missing-space-atx* - No space after hash on atx style header\r\n* **MD019** *no-multiple-space-atx* - Multiple spaces after hash on atx style header\r\n* **MD020** *no-missing-space-closed-atx* - No space inside hashes on closed atx style header\r\n* **MD021** *no-multiple-space-closed-atx* - Multiple spaces inside hashes on closed atx style header\r\n* **MD022** *blanks-around-headers* - Headers should be surrounded by blank lines\r\n* **MD023** *header-start-left* - Headers must start at the beginning of the line\r\n* **MD024** *no-duplicate-header* - Multiple headers with the same content\r\n* **MD025** *single-h1* - Multiple top level headers in the same document\r\n* **MD026** *no-trailing-punctuation* - Trailing punctuation in header\r\n* **MD027** *no-multiple-space-blockquote* - Multiple spaces after blockquote symbol\r\n* **MD028** *no-blanks-blockquote* - Blank line inside blockquote\r\n* **MD029** *ol-prefix* - Ordered list item prefix\r\n* **MD030** *list-marker-space* - Spaces after list markers\r\n* **MD031** *blanks-around-fences* - Fenced code blocks should be surrounded by blank lines\r\n* **MD032** *blanks-around-lists* - Lists should be surrounded by blank lines\r\n* **MD033** *no-inline-html* - Inline HTML\r\n* **MD034** *no-bare-urls* - Bare URL used\r\n* **MD035** *hr-style* - Horizontal rule style\r\n* **MD036** *no-emphasis-as-header* - Emphasis used instead of a header\r\n* **MD037** *no-space-in-emphasis* - Spaces inside emphasis markers\r\n* **MD038** *no-space-in-code* - Spaces inside code span elements\r\n* **MD039** *no-space-in-links* - Spaces inside link text\r\n* **MD040** *fenced-code-language* - Fenced code blocks should have a language specified\r\n* **MD041** *first-line-h1* - First line in file should be a top level header\r\n* **MD042** *no-empty-links* - No empty links\r\n* **MD043** *required-headers* - Required header structure\r\n\r\nSee [Rules.md](doc/Rules.md) for more details.\r\n\r\n## Tags\r\n\r\n* **atx** - MD018, MD019\r\n* **atx_closed** - MD020, MD021\r\n* **blank_lines** - MD012, MD022, MD031, MD032\r\n* **blockquote** - MD027, MD028\r\n* **bullet** - MD004, MD005, MD006, MD007, MD032\r\n* **code** - MD014, MD031, MD038, MD040\r\n* **emphasis** - MD036, MD037\r\n* **hard_tab** - MD010\r\n* **headers** - MD001, MD002, MD003, MD018, MD019, MD020, MD021, MD022, MD023,\r\n  MD024, MD025, MD026, MD036, MD041, MD043\r\n* **hr** - MD035\r\n* **html** - MD033\r\n* **indentation** - MD005, MD006, MD007, MD027\r\n* **language** - MD040\r\n* **line_length** - MD013\r\n* **links** - MD011, MD034, MD039, MD042\r\n* **ol** - MD029, MD030, MD032\r\n* **spaces** - MD018, MD019, MD020, MD021, MD023\r\n* **ul** - MD004, MD005, MD006, MD007, MD030, MD032\r\n* **url** - MD034\r\n* **whitespace** - MD009, MD010, MD012, MD027, MD028, MD030, MD037, MD038, MD039\r\n\r\n## Configuration\r\n\r\nRules can be enabled, disabled, and configured via `options.config` (described\r\nbelow) to define the expected behavior for a set of inputs. To enable or disable\r\nrules within a file, add one of these markers to the appropriate place (HTML\r\ncomments don't appear in the final markup):\r\n\r\n* Disable all rules: `<!-- markdownlint-disable -->`\r\n* Enable all rules: `<!-- markdownlint-enable -->`\r\n* Disable one or more rules: `<!-- markdownlint-disable MD001 MD002 -->`\r\n* Enable one or more rules: `<!-- markdownlint-enable MD001 MD002 -->`\r\n\r\nFor example:\r\n\r\n```md\r\n<!-- markdownlint-disable MD037 -->\r\ndeliberate space * in * emphasis\r\n<!-- markdownlint-enable MD037 -->\r\n```\r\n\r\nChanges take effect starting with the line a comment is on, so the following\r\nhas no effect:\r\n\r\n```md\r\nspace * in * emphasis <!-- markdownlint-disable --> <!-- markdownlint-enable -->\r\n```\r\n\r\n## API\r\n\r\nStandard asynchronous interface:\r\n\r\n```js\r\n/**\r\n * Lint specified Markdown files according to configurable rules.\r\n *\r\n * @param {Object} options Configuration options.\r\n * @param {Function} callback Callback (err, result) function.\r\n * @returns {void}\r\n */\r\nfunction markdownlint(options, callback) { ... }\r\n```\r\n\r\nSynchronous interface (for build scripts, etc.):\r\n\r\n```js\r\n/**\r\n * Lint specified Markdown files according to configurable rules.\r\n *\r\n * @param {Object} options Configuration options.\r\n * @returns {Object} Result object.\r\n */\r\nfunction markdownlint.sync(options) { ... }\r\n```\r\n\r\n### options\r\n\r\nType: `Object`\r\n\r\nConfigures the function.\r\n\r\n#### options.files\r\n\r\nType: `Array` of `String`\r\n\r\nList of files to lint.\r\n\r\nEach array element should be a single file (via relative or absolute path);\r\n[globbing](https://en.wikipedia.org/wiki/Glob_%28programming%29) is the caller's\r\nresponsibility.\r\n\r\nExample: `[ \"one.md\", \"dir/two.md\" ]`\r\n\r\n#### options.strings\r\n\r\nType: `Object` mapping `String` to `String`\r\n\r\nMap of identifiers to strings for linting.\r\n\r\nWhen Markdown content is not available as files, it can be passed as strings.\r\nThe keys of the `strings` object are used to identify each input value in the\r\n`result` summary.\r\n\r\nExample:\r\n\r\n```json\r\n{\r\n  \"readme\": \"# README\\n...\",\r\n  \"changelog\": \"# CHANGELOG\\n...\"\r\n}\r\n```\r\n\r\n#### options.frontMatter\r\n\r\nType: `RegExp`\r\n\r\nMatches any [front matter](https://jekyllrb.com/docs/frontmatter/) found at the\r\nbeginning of a file.\r\n\r\nSome Markdown content begins with metadata; the default `RegExp` for this option\r\nignores common forms of \"front matter\". To match differently, specify a custom\r\n`RegExp` or use the value `null` to disable the feature.\r\n\r\nNote: Matches must occur at the start of the file.\r\n\r\nDefault:\r\n\r\n```js\r\n/^---$[^]*?^---$(\\r\\n|\\r|\\n)/m\r\n```\r\n\r\nIgnores:\r\n\r\n```text\r\n---\r\nlayout: post\r\ntitle: Title\r\n---\r\n```\r\n\r\n#### options.config\r\n\r\nType: `Object` mapping `String` to `Boolean | Object`\r\n\r\nConfigures the rules to use.\r\n\r\nObject keys are rule names or aliases and values are the rule's configuration.\r\nThe value `false` disables a rule, `true` enables its default configuration,\r\nand passing an object customizes its settings. Setting the special `default`\r\nrule to `true` or `false` includes/excludes all rules by default. Enabling or\r\ndisabling a tag name (ex: `whitespace`) affects all rules having that tag.\r\n\r\nThe `default` rule is applied first, then keys are processed in order from top\r\nto bottom with later values overriding earlier ones. Keys (including rule names,\r\naliases, tags, and `default`) are not case-sensitive.\r\n\r\nExample:\r\n\r\n```json\r\n{\r\n  \"default\": true,\r\n  \"MD003\": { \"style\": \"atx_closed\" },\r\n  \"MD007\": { \"indent\": 4 },\r\n  \"no-hard-tabs\": false,\r\n  \"whitespace\": false\r\n}\r\n```\r\n\r\nSets of rules (known as a \"style\") can be stored separately and loaded as\r\n[JSON](https://en.wikipedia.org/wiki/JSON).\r\n\r\nExample:\r\n\r\n```js\r\nvar options = {\r\n  \"files\": [ \"...\" ],\r\n  \"config\": require(\"style/relaxed.json\")\r\n};\r\n```\r\n\r\nSee the [style](style) directory for more samples.\r\n\r\nSee [markdownlint-config-schema.json](schema/markdownlint-config-schema.json)\r\nfor the [JSON Schema](http://json-schema.org/) of the `options.config` object.\r\n\r\n#### options.resultVersion\r\n\r\nType: `Number`\r\n\r\nSpecifies which version of the `result` object to return (see the \"Usage\" section\r\nbelow for examples).\r\n\r\nPassing a `resultVersion` of `0` corresponds to the original, simple format where\r\neach error is identified by rule name and line number. This is the default.\r\n\r\nPassing a `resultVersion` of `1` corresponds to a more detailed format where each\r\nerror includes information about the line number, rule name, alias, description,\r\nas well as any additional detail or context that is available.\r\n\r\n### callback\r\n\r\nType: `Function` taking (`Error`, `Object`)\r\n\r\nStandard completion callback.\r\n\r\n### result\r\n\r\nType: `Object`\r\n\r\nCall `result.toString()` for convenience or see below for an example of the\r\nstructure of the `result` object. Passing the value `true` to `toString()`\r\nuses rule aliases (ex: `no-hard-tabs`) instead of names (ex: `MD010`).\r\n\r\n## Usage\r\n\r\nInvoke `markdownlint` and use the `result` object's `toString` method:\r\n\r\n```js\r\nvar markdownlint = require(\"markdownlint\");\r\n\r\nvar options = {\r\n  \"files\": [ \"good.md\", \"bad.md\" ],\r\n  \"strings\": {\r\n    \"good.string\": \"# good.string\\n\\nThis string passes all rules.\",\r\n    \"bad.string\": \"#bad.string\\n\\n#This string fails\\tsome rules.\"\r\n  }\r\n};\r\n\r\nmarkdownlint(options, function callback(err, result) {\r\n  if (!err) {\r\n    console.log(result.toString());\r\n  }\r\n});\r\n```\r\n\r\nOutput:\r\n\r\n```text\r\nbad.string: 3: MD010 Hard tabs\r\nbad.string: 1: MD018 No space after hash on atx style header\r\nbad.string: 3: MD018 No space after hash on atx style header\r\nbad.md: 3: MD010 Hard tabs\r\nbad.md: 1: MD018 No space after hash on atx style header\r\nbad.md: 3: MD018 No space after hash on atx style header\r\n```\r\n\r\nOr invoke `markdownlint.sync` for a synchronous call and/or pass `true` to `toString`\r\nto use rule aliases instead of names:\r\n\r\n```js\r\nvar result = markdownlint.sync(options);\r\nconsole.log(result.toString(true));\r\n```\r\n\r\nOutput:\r\n\r\n```text\r\nbad.string: 3: no-hard-tabs Hard tabs\r\nbad.string: 1: no-missing-space-atx No space after hash on atx style header\r\nbad.string: 3: no-missing-space-atx No space after hash on atx style header\r\nbad.md: 3: no-hard-tabs Hard tabs\r\nbad.md: 1: no-missing-space-atx No space after hash on atx style header\r\nbad.md: 3: no-missing-space-atx No space after hash on atx style header\r\n```\r\n\r\nTo examine the `result` object directly:\r\n\r\n```js\r\nmarkdownlint(options, function callback(err, result) {\r\n  if (!err) {\r\n    console.dir(result, { \"colors\": true });\r\n  }\r\n});\r\n```\r\n\r\nOutput:\r\n\r\n```json\r\n{\r\n  \"good.md\": {},\r\n  \"bad.md\": {\r\n    \"MD010\": [ 3 ],\r\n    \"MD018\": [ 1, 3 ]\r\n  }\r\n}\r\n```\r\n\r\nFor more detailed error reporting, set `options.resultVersion` to `1`:\r\n\r\n```js\r\nvar options = {\r\n  \"files\": [ \"good.md\", \"bad.md\" ],\r\n  \"resultVersion\": 1\r\n};\r\n```\r\n\r\nWith that, the output of `result.toString` looks like:\r\n\r\n```text\r\nbad.string: 3: MD010/no-hard-tabs Hard tabs [Column: 19]\r\nbad.string: 1: MD018/no-missing-space-atx No space after hash on atx style header [Context: \"#bad.string\"]\r\nbad.string: 3: MD018/no-missing-space-atx No space after hash on atx style header [Context: \"#This string fails    some rules.\"]\r\nbad.md: 3: MD010/no-hard-tabs Hard tabs [Column: 17]\r\nbad.md: 1: MD018/no-missing-space-atx No space after hash on atx style header [Context: \"#bad.md\"]\r\nbad.md: 3: MD018/no-missing-space-atx No space after hash on atx style header [Context: \"#This file fails    some rules.\"]\r\n```\r\n\r\nAnd the `result` object becomes:\r\n\r\n```json\r\n{\r\n  \"good.md\": [],\r\n  \"bad.md\": [\r\n    { \"lineNumber\": 3,\r\n      \"ruleName\": \"MD010\",\r\n      \"ruleAlias\": \"no-hard-tabs\",\r\n      \"ruleDescription\": \"Hard tabs\",\r\n      \"errorDetail\": \"Column: 17\",\r\n      \"errorContext\": null,\r\n      \"errorRange\": [ 17, 1 ] },\r\n    { \"lineNumber\": 1,\r\n      \"ruleName\": \"MD018\",\r\n      \"ruleAlias\": \"no-missing-space-atx\",\r\n      \"ruleDescription\": \"No space after hash on atx style header\",\r\n      \"errorDetail\": null,\r\n      \"errorContext\": \"#bad.md\",\r\n      \"errorRange\": [ 1, 2 ] },\r\n    { \"lineNumber\": 3,\r\n      \"ruleName\": \"MD018\",\r\n      \"ruleAlias\": \"no-missing-space-atx\",\r\n      \"ruleDescription\": \"No space after hash on atx style header\",\r\n      \"errorDetail\": null,\r\n      \"errorContext\": \"#This file fails\\tsome rules.\",\r\n      \"errorRange\": [ 1, 2 ] }\r\n  ]\r\n}\r\n```\r\n\r\nIntegration with the [gulp](http://gulpjs.com/) build system is straightforward:\r\n\r\n```js\r\nvar gulp = require(\"gulp\");\r\nvar through2 = require(\"through2\");\r\nvar markdownlint = require(\"markdownlint\");\r\n\r\ngulp.task(\"markdownlint\", function task() {\r\n  return gulp.src(\"*.md\", { \"read\": false })\r\n    .pipe(through2.obj(function obj(file, enc, next) {\r\n      markdownlint(\r\n        { \"files\": [ file.relative ] },\r\n        function callback(err, result) {\r\n          var resultString = (result || \"\").toString();\r\n          if (resultString) {\r\n            console.log(resultString);\r\n          }\r\n          next(err, file);\r\n        });\r\n    }));\r\n});\r\n```\r\n\r\nOutput:\r\n\r\n```text\r\n[00:00:00] Starting 'markdownlint'...\r\nbad.md: 3: MD010 Hard tabs\r\nbad.md: 1: MD018 No space after hash on atx style header\r\nbad.md: 3: MD018 No space after hash on atx style header\r\n[00:00:00] Finished 'markdownlint' after 10 ms\r\n```\r\n\r\nIntegration with the [Grunt](http://gruntjs.com/) build system is similar:\r\n\r\n```js\r\nvar markdownlint = require(\"markdownlint\");\r\n\r\nmodule.exports = function wrapper(grunt) {\r\n  grunt.initConfig({\r\n    \"markdownlint\": {\r\n      \"example\": {\r\n        \"src\": [ \"*.md\" ]\r\n      }\r\n    }\r\n  });\r\n\r\n  grunt.registerMultiTask(\"markdownlint\", function task() {\r\n    var done = this.async();\r\n    markdownlint(\r\n      { \"files\": this.filesSrc },\r\n      function callback(err, result) {\r\n        var resultString = err || ((result || \"\").toString());\r\n        if (resultString) {\r\n          grunt.fail.warn(\"\\n\" + resultString + \"\\n\");\r\n        }\r\n        done(!err || !resultString);\r\n      });\r\n  });\r\n};\r\n```\r\n\r\nOutput:\r\n\r\n```text\r\nRunning \"markdownlint:example\" (markdownlint) task\r\nWarning:\r\nbad.md: 3: MD010 Hard tabs\r\nbad.md: 1: MD018 No space after hash on atx style header\r\nbad.md: 3: MD018 No space after hash on atx style header\r\n Use --force to continue.\r\n```\r\n\r\n## Browser\r\n\r\n`markdownlint` also works in the browser.\r\n\r\nGenerate normal and minified scripts with:\r\n\r\n```shell\r\nnpm run build-demo\r\n```\r\n\r\nThen reference `markdown-it` and `markdownlint`:\r\n\r\n```html\r\n<script src=\"demo/markdown-it.min.js\"></script>\r\n<script src=\"demo/markdownlint-browser.min.js\"></script>\r\n```\r\n\r\nAnd call it like so:\r\n\r\n```js\r\nvar options = {\r\n  \"strings\": {\r\n    \"content\": \"Some Markdown to lint.\"\r\n  }\r\n};\r\nvar results = window.markdownlint.sync(options).toString();\r\n```\r\n\r\n## History\r\n\r\n* 0.0.1 - Initial release, includes tests MD001-MD032.\r\n* 0.0.2 - Improve documentation, tests, and code.\r\n* 0.0.3 - Add synchronous API, improve documentation and code.\r\n* 0.0.4 - Add tests MD033-MD040, update dependencies.\r\n* 0.0.5 - Add `strings` option to enable file-less scenarios, add in-browser demo.\r\n* 0.0.6 - Improve performance, simplify in-browser, update dependencies.\r\n* 0.0.7 - Add MD041, improve MD003, ignore front matter, update dependencies.\r\n* 0.0.8 - Support disabling/enabling rules inline, improve code fence, dependencies.\r\n* 0.1.0 - Add aliases, exceptions for MD033, exclusions for MD013, dependencies.\r\n  * 0.1.1 - Fix bug handling HTML in tables, reference markdownlint-cli.\r\n* 0.2.0 - Add MD042/MD043, enhance MD002/MD003/MD004/MD007/MD011/MD025/MD041, dependencies.\r\n* 0.3.0 - More detailed error reporting with `resultVersion`, enhance MD010/MD012/MD036,\r\n          fixes for MD027/MD029/MD030, include JSON schema, dependencies.\r\n  * 0.3.1 - Fix regressions in MD032/MD038, update dependencies.\r\n\r\n[npm-image]: https://img.shields.io/npm/v/markdownlint.svg\r\n[npm-url]: https://www.npmjs.com/package/markdownlint\r\n[github-tag-image]: https://img.shields.io/github/tag/DavidAnson/markdownlint.svg\r\n[github-tag-url]: https://github.com/DavidAnson/markdownlint\r\n[travis-image]: https://img.shields.io/travis/DavidAnson/markdownlint/master.svg\r\n[travis-url]: https://travis-ci.org/DavidAnson/markdownlint\r\n[coveralls-image]: https://img.shields.io/coveralls/DavidAnson/markdownlint/master.svg\r\n[coveralls-url]: https://coveralls.io/r/DavidAnson/markdownlint\r\n[license-image]: https://img.shields.io/npm/l/markdownlint.svg\r\n[license-url]: https://opensource.org/licenses/MIT\r\n",
  "readmeFilename": "README.md",
  "gitHead": "56f3abe600fde65c9149cc32d5c3bf2fba089623",
  "_id": "markdownlint@0.3.1",
  "_shasum": "8bc5ad5bad8a24b3fcfa5aa5cd1ceb8e063c49c6",
  "_from": "markdownlint@>=0.3.1 <0.4.0"
}
